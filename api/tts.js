export default async function handler(req, res) {
  // ‚úÖ Cho ph√©p t·∫•t c·∫£ origin truy c·∫≠p API n√†y
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // ‚úÖ X·ª≠ l√Ω request OPTIONS (tr√¨nh duy·ªát g·ª≠i ƒë·ªÉ h·ªèi tr∆∞·ªõc)
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  try {
    const { text } = req.query;
    if (!text) {
      return res.status(400).json({ error: "Thi·∫øu tham s·ªë text" });
    }

    // ‚úÖ Ghi th·∫≥ng key FPT.AI v√†o ƒë√¢y ƒë·ªÉ test (key c·ªßa th·∫ßy)
    const FPT_API_KEY = "ceytqQlIkjv6zKpxlliocdtAjSQeQRvN"; // ‚Üê thay b·∫±ng key FPT c·ªßa th·∫ßy

    const response = await fetch("https://api.fpt.ai/hmi/tts/v5", {
      method: "POST",
      headers: {
        "api-key": FPT_API_KEY,
        "voice": "banmai",
        "speed": "0",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams({ text }),
    });

    const data = await response.json();

    if (!data.async) {
      console.error("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c link √¢m thanh:", data);
      return res.status(500).json({ error: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c link √¢m thanh t·ª´ FPT", data });
    }

    console.log("üîó Link √¢m thanh:", data.async);

    // üïí ƒê·ª£i FPT t·∫°o file (th∆∞·ªùng m·∫•t 1‚Äì2s)
    await new Promise(r => setTimeout(r, 2000));

    const audioResp = await fetch(data.async);
    if (!audioResp.ok) {
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i file √¢m thanh: ${audioResp.status}`);
    }

    const audioBuffer = await audioResp.arrayBuffer();
    res.setHeader("Content-Type", "audio/mpeg");
    res.status(200).send(Buffer.from(audioBuffer));
  } catch (error) {
    console.error("üî• L·ªói x·ª≠ l√Ω FPT:", error);
    res.status(500).json({ error: "L·ªói x·ª≠ l√Ω proxy", details: error.message });
  }
}
