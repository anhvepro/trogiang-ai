export default async function handler(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") return res.status(200).end();

  try {
    const { text } = req.query;
    if (!text) return res.status(400).json({ error: "Thi·∫øu tham s·ªë text" });

    const FPT_KEY = process.env.FPT_API_KEY || "ceytqQlIkjv6zKpxlliocdtAjSQeQRvN";
    if (!FPT_KEY) {
      return res.status(500).json({ error: "Ch∆∞a c√≥ FPT_API_KEY trong m√¥i tr∆∞·ªùng Vercel" });
    }

    console.log("üéß G·ªçi FPT TTS v·ªõi text:", text);

    // G·ª≠i y√™u c·∫ßu TTS ƒë·∫øn FPT
    const fptResp = await fetch("https://api.fpt.ai/hmi/tts/v5", {
      method: "POST",
      headers: {
        "api-key": FPT_KEY,
        "voice": "banmai",
        "speed": "0",
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams({ text }),
    });

    const fptJson = await fptResp.json();
    console.log("üì° Ph·∫£n h·ªìi FPT:", fptJson);

    if (!fptJson?.async) {
      return res.status(502).json({ error: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c link async t·ª´ FPT", fptJson });
    }

    const audioUrl = fptJson.async;
    console.log("üïì Ch·ªù FPT t·∫°o file:", audioUrl);

    // Ch·ªù t·ªõi khi file t·ªìn t·∫°i (t·ªëi ƒëa 15 l·∫ßn √ó 3s = 45 gi√¢y)
    let ready = false;
    for (let i = 0; i < 15; i++) {
      const check = await fetch(audioUrl, { method: "HEAD" });
      console.log(`Ki·ªÉm tra file (l·∫ßn ${i + 1}): ${check.status}`);
      if (check.ok) {
        ready = true;
        break;
      }
      await new Promise(r => setTimeout(r, 3000)); // ƒë·ª£i 3 gi√¢y
    }

    if (!ready) {
      return res.status(504).json({ error: "File ch∆∞a s·∫µn s√†ng t·ª´ FPT sau 45 gi√¢y" });
    }

    console.log("‚úÖ File FPT s·∫µn s√†ng, t·∫£i v·ªÅ...");

    // T·∫£i file v·ªÅ v√† g·ª≠i l·∫°i client
    const fileResp = await fetch(audioUrl);
    const arrayBuffer = await fileResp.arrayBuffer();

    res.setHeader("Content-Type", "audio/mpeg");
    res.status(200).send(Buffer.from(arrayBuffer));
    console.log("üéâ File √¢m thanh ƒë√£ g·ª≠i v·ªÅ client!");

  } catch (error) {
    console.error("üî• L·ªói proxy:", error);
    res.status(500).json({ error: "L·ªói x·ª≠ l√Ω proxy", details: error.message });
  }
}
